import os
import subprocess
import json
import re

# Directory where Solidity contracts are stored
CONTRACTS_DIR = "contracts"

# List of vulnerability patterns to detect
VULNERABILITY_PATTERNS = {
    "Reentrancy": r"\bcall\s*\(",
    "Unchecked Low-Level Call": r"\bcall\s*\(",
    "Integer Overflow": r"\buint\s*(8|16|32|64|128|256)?\s*\b.*\+\s*",
    "Integer Underflow": r"\buint\s*(8|16|32|64|128|256)?\s*\b.*-\s*",
    "tx.origin Authentication": r"\btx\.origin\b",
    "Delegatecall Vulnerability": r"\bdelegatecall\s*\(",
    "Selfdestruct": r"\bselfdestruct\s*\(",
    "Hardcoded Private Key": r"private\s+key\s*=\s*['\"0-9a-fA-F]+",
    "Predictable RNG": r"block\.timestamp|block\.hash",
    "Denial of Service (DOS)": r"\bwhile\s*\(|\bfor\s*\("
}

# Function to analyze Solidity contracts
def analyze_contracts():
    results = []
    
    for file in os.listdir(CONTRACTS_DIR):
        if file.endswith(".sol"):
            contract_path = os.path.join(CONTRACTS_DIR, file)
            print(f"üîç Analyzing: {contract_path}")

            # Step 1: Static Analysis using solc
            try:
                solc_output = subprocess.run(
                    ["solc", "--optimize", "--bin", "--abi", "--hashes", contract_path],
                    capture_output=True,
                    text=True
                )
                static_analysis_result = solc_output.stdout
            except Exception as e:
                static_analysis_result = f"‚ö†Ô∏è Error running solc: {str(e)}"

            # Step 2: Vulnerability Scanning
            vulnerabilities_found = scan_vulnerabilities(contract_path)

            # Step 3: Dynamic Analysis (Simulated Execution)
            try:
                dynamic_analysis_result = run_dynamic_tests(contract_path)
            except Exception as e:
                dynamic_analysis_result = f"‚ö†Ô∏è Error in dynamic analysis: {str(e)}"

            # Store results
            results.append({
                "contract": file,
                "static_analysis": static_analysis_result,
                "vulnerabilities": vulnerabilities_found if vulnerabilities_found else "‚úÖ No vulnerabilities detected.",
                "dynamic_analysis": dynamic_analysis_result
            })
    
    # Save results to JSON file
    with open("analysis_results.json", "w") as f:
        json.dump(results, f, indent=4)

    print("\n‚úÖ Analysis Completed! Results saved in 'analysis_results.json'.")

# Function to scan for known vulnerabilities using regex
def scan_vulnerabilities(contract_path):
    vulnerabilities = []
    with open(contract_path, "r", encoding="utf-8") as f:
        code = f.read()
    
    for vuln_name, pattern in VULNERABILITY_PATTERNS.items():
        if re.search(pattern, code):
            vulnerabilities.append(f"‚ö†Ô∏è {vuln_name} detected!")

    return vulnerabilities

# Function to run dynamic tests on contracts (Placeholder)
def run_dynamic_tests(contract_path):
    """
    Simulate transactions and detect runtime issues.
    This part can be expanded based on your testing framework (e.g., Brownie, Hardhat).
    """
    return f"Simulated execution of {contract_path} - No runtime issues detected."

# Run the analysis
if __name__ == "__main__":
    analyze_contracts()
